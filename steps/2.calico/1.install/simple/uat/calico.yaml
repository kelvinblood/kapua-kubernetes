# Calico Version v3.4.1
# https://docs.projectcalico.org/v3.4/releases#v3.4.1
# This manifest includes the following component versions:
#   calico/node:v3.4.1
#   calico/cni:v3.4.1
#   calico/kube-controllers:v3.4.1

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://10.19.0.70:2379,https://10.19.0.71:2379,https://10.19.0.72:2379"

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
  # Configure the Calico backend to use.
  calico_backend: "bird"

  # Configure the MTU to use
  veth_mtu: "1440"

  # The CNI network configuration to install on each node.  The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMUF6Mk1HQnkwM3lLbElvcXdMcmhFYTkzNVRjTFlMZGlpelVyb2YzMmZGWHZMRzNFCjFQWm0wVzRubUl3SUVrd1NoWFgwNGFTWHh3V1pIUzJNSnVvTFlEYmNYMTB0eU54UGo1RUFUejZpNjhaZERSbHEKTXF5bC8xWFZsZlpUY0pIVTZBcDlQU3plcWt3UXlOWnZ1c2o3YVpxVE9VTndMNkVvWHZ3VzBQNUFoQ3hJR05zTwpzQk52bTEvZGw5UUpaa1B0VWZBcW5Fd3h2WEpTTk1sNm96c2xzRGh6V1YvRHV1TmRoV0ZnaHVqUG44cWxtMGVvCktWOUNjVlpYSUp5MUJQWjNvVGE3RUdMNDBJbk0wY3YvUWtydytRd0pCOFc2ZEJ4MnozREdNbTd3QjB3TmhpVG0KZytNMUJrS0Z6L2NoNE5tYzc5VmlEVFJsNHR5Y3N2KzdoQnp5THdJREFRQUJBb0lCQUh4NUYxS1NheFRsdUZzMQpONTltazVOVUV1Y0VCclBCTWlGUkZzbkNVQnZ3UGJNd3hDZldjOGhnQnZJdTBOWWN2WXFHRVRjYTdOVXczZzRZCm5IcURUQ1l3VGUvVXZIbDVpV0pXMVgydTRPZlJ5dkZUaDlrekswWFUxc2x1ak5BNWFtYkRNWHpsaDljalMzNzUKRVNEdHRWYnFHNTJ6am5rRytyRzIvSlcxaVoyTFpsWWtoNmVLYUpQSmxQd1l3V0FqbnFCTXhWV2YxVDRZb0RBNgpUOFc1RFQ2WjJuYzc4R1puMTRZRU53MnFHZ1dkSE1KTHlYUm9uRVUrZ3Bzdll0TGtJUzFtQUFuNzRueVp6TkJUCndTakVuLzNuQ1UrTWxoVXUxREZ4VjhYUTAwa1E4QjAxbjkwcERVdHkyd3JlME9FTitGS3BhSWIrdXNHQmRLY2cKVHlaMGpORUNnWUVBMW54OU1nUUFGQTk4bHJJeng4cDdDOFdTeGNCRW1XdlhBR3lOeWVqT3hlcWVpK3k4ZktiVQpkVTZvczAwREJaUmU0ZzYwMjhwazJMaW5EU2NrRmFDaStFQW5HeVlaQnBuUzVnWG1DOFhia25WUS8wcXFZZENhCmJOVE9jc1VXOFg0a3cwa3haWEFDQlJsckdudDFNamFSRWVVbkpmQ0hrd3VnZXFvSXpDVWxBdXNDZ1lFQS9SZksKQ2h2ZkZDc29DaTdoZ0RqRm1oZXBYVlpWRDdPZGwrcFFlcWM1NWxETElJMlB6eFRhN0IwLzQ4UjltRGVqc3d5LwozVS9wY0h2QUp3Mnpka1BZZnFNUThpMjlYMktEUU1Cc0N4NllIZFEza0IzVEZKZEl2MkZBQjhIaEJHUjQ0VXVLCkorQUNFaVpCZlVKZVJRRDVGNVRSTjJsR0ZFZW52Rm1PMUdOdDFNMENnWUJ4WCtpRmtadkEvdGFxaVpQWlhleGcKc3BUOHRyOE1JZmJLSUpkcVRRZFBrczh2dzNsMm9uRFhlVGF2WUZ2aWpTVUNkU2Vncm9GVUZYY24rcktXUkEwaApFRGdibjYzRzBYU3JaaDdOeGs1a1FtTUlMeDJWQ3NFMkdkN3V4OE55NzJ6YlZVc3BCV1hyOEIydkorY3hIYXJkClBMWE8xaSt6eUllUmoyT0xGVzlVOVFLQmdIVlFrNXcvOHhWOE02RVV2ZjRiVXF6c2p0cnU2NXJOblIwUHhhSTAKNVllMnA1RTlUUTJtRXh3aktydy9GaUI2bWV5aTJrU1JpQmxWbzJuMjFkclo4LzR2USttZC9ndTZ0REJOZ1VkZQpOUkNPai9yRGVGWXhFYzEwSEtQNzRIdVN2dDFma0hpUFF5WjZpUnl3cU5XL2I3YllpbW51NkViNk4rdjhiMUpQCmpGZDVBb0dBSkpLQjRJV1VSZ0VBM1JObFlVSUFkUnNSc1EvR2NJelBlTHduWEVmRXZNNklKM1FrZTNIY3prcEMKUkE5NnNJRWN4dzNyNnNJb1p0WGJaWGhxSmxjVjl4M09xdFp1bVBJV2VVRU5FTE9xM3BHZ3lBTFdDcU9ZN2x3QwpHb2M2VDZpTlRYbEFEbFNOYWxvWWkrc2JYYkdTR05UT2tnbm95VVh3S213bUNUdWt5bDg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ5RENDQXR5Z0F3SUJBZ0lVUDhRZjhsSGpqZ1pnaU9aUjBETmV2QVlRenJnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lERUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjA1aGJrNXBibWN4Q3pBSkJnTlZCQWNUQWtSWQpNUXd3Q2dZRFZRUUtFd05yT0hNeER6QU5CZ05WQkFzVEJsTjVjM1JsYlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1ClpYUmxjekFnRncweE9UQXpNRFF3TkRFME1EQmFHQTh5TVRFNU1ESXdPREEwTVRRd01Gb3dXakVMTUFrR0ExVUUKQmhNQ1EwNHhFREFPQmdOVkJBZ1RCMDVoYms1cGJtY3hDekFKQmdOVkJBY1RBbGhUTVF3d0NnWURWUVFLRXdOcgpPSE14RHpBTkJnTlZCQXNUQmxONWMzUmxiVEVOTUFzR0ExVUVBeE1FWlhSalpEQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOUU05akJnY3ROOGlwU0tLc0M2NFJHdmQrVTNDMkMzWW9zMUs2SDkKOW54Vjd5eHR4TlQyWnRGdUo1aU1DQkpNRW9WMTlPR2tsOGNGbVIwdGpDYnFDMkEyM0Y5ZExjamNUNCtSQUU4KwpvdXZHWFEwWmFqS3NwZjlWMVpYMlUzQ1IxT2dLZlQwczNxcE1FTWpXYjdySSsybWFremxEY0MraEtGNzhGdEQrClFJUXNTQmpiRHJBVGI1dGYzWmZVQ1daRDdWSHdLcHhNTWIxeVVqVEplcU03SmJBNGMxbGZ3N3JqWFlWaFlJYm8KejUvS3BadEhxQ2xmUW5GV1Z5Q2N0UVQyZDZFMnV4QmkrTkNKek5ITC8wSks4UGtNQ1FmRnVuUWNkczl3eGpKdQo4QWRNRFlZazVvUGpOUVpDaGMvM0llRFpuTy9WWWcwMFplTGNuTEwvdTRRYzhpOENBd0VBQWFPQnFUQ0JwakFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZHYnJIZUt0ejNGUExPSVE1MUNXdnZVNzJPM3ZNQjhHQTFVZApJd1FZTUJhQUZEdlQySHEvNUpYdWtDNGliTWtmTFROL1NEdW9NQ2NHQTFVZEVRUWdNQjZIQkFvVEFFYUhCQW9UCkFFZUhCQW9UQUVpSEJIOEFBQUdIQkFvVEFFWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTHRWRW5DUHhwa2wKSktzdHdkNEJ5QXVTSlJ1WTZCUjJIbDJyVzhHN1Z6SUU5THhRQTdGaXB3OFZrckZvc1FONEZrWGdDQ2k4SFc1UgpjNnFEdS9GcFAzNFJZZWVhQlpYU3lWQlluSWIzM21DZ2hTZzAxbTJWelM1bjhEZHY2bmJNUG1US1lYL2lhQmo3CjRDcXNaWTA4T0JRcDR0ZWcrbm5WY25TOHFpajJHbVpHSS9JdG5sNkJPeFd5RitUUk1ta3pOYXVWdUtQVW0yWmsKeEwzd0hHMzNEdERDKzZJd2NRZWlLNlpJUUxKTTNYOWZydTJ1RjJJUWc0bkdIenAzT2dBVUVQY1pOTFBDSCtDSQpBRElCaUJXeGgyNWk3bnBQZUkxRnk3Y0daUElac3BPQjFObldHQmE4UjM4SlBkY2hHNjlrRkFoTnZpQ1lreE51ClRJelpPbytwcTE0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0akNDQXA2Z0F3SUJBZ0lVUEZRMXFGVmlqbG5hNzRsRHdUK3BOYktac0lNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lERUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjA1aGJrNXBibWN4Q3pBSkJnTlZCQWNUQWtSWQpNUXd3Q2dZRFZRUUtFd05yT0hNeER6QU5CZ05WQkFzVEJsTjVjM1JsYlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1ClpYUmxjekFnRncweE9UQXpNRFF3TXpVME1EQmFHQTh5TVRFNU1ESXdPREF6TlRRd01Gb3dZREVMTUFrR0ExVUUKQmhNQ1EwNHhFREFPQmdOVkJBZ1RCMDVoYms1cGJtY3hDekFKQmdOVkJBY1RBa1JZTVF3d0NnWURWUVFLRXdOcgpPSE14RHpBTkJnTlZCQXNUQmxONWMzUmxiVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5Hdzd3cHRKdFN1dU1KYzdUbHZXeFp5RGgwZVNzNU8KSGhkV0hMOWNuRnV5T1I1amxnVHAyZU5qdTlxdG9nam5lSmJTZlRuYmVGaUhDUlFrWGVGMCtKMTNoNmxWR2s3TwpmdTRaOU4xN0Q1RmJJOUdFd09TU3FnQW9CUDMrMFpTWXM4RlY4Vll2UGF5V3c5a3ZxZ0R6ZGRiMU9iOW94UjRXCmN2VFZ6OE1LSmptek95cWFpREQ3TDZodnluS3VjKyt4Y2hrREFFS0pHdlphSnZZWk81Mk5NUmVhQkxOQ3lvVnAKRnZGMDBQMUJhTDd0Z0VsWmd1dVBmamlzTnJZUmxXMHA1NStHWjk3L2ZOcU9ZRm45NHR3N1lCWjhzcnQ1OVF3ZAp0ZHJqbEhaRW1TRm5uYkllSitFYjZBVHFyR1MrMjdqUHltV2FXYnl4eG5sNldGTlh5a3VuR3drQ0F3RUFBYU5tCk1HUXdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRSXdIUVlEVlIwT0JCWUUKRkR2VDJIcS81Slh1a0M0aWJNa2ZMVE4vU0R1b01COEdBMVVkSXdRWU1CYUFGRHZUMkhxLzVKWHVrQzRpYk1rZgpMVE4vU0R1b01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQThIaEdieXhDT0duMnhkWFRxaGtFUy9aZVBTZWVkCnE0T05nUUw5V3FCZjlQVTAvRS9ETnBGa0VhYXFGZ0dtUFh5a1BoTzlaeFRXZHRrbEtOWDIzMkxsZ0JXVzI1ZVgKTEY2L096MDNQT3BGdlNkWDRCK1BUaG1GTHhIcWl4L3BrbHFQOEQzVXdFK3lIYWlFTWhjWmN5QnJ3ajh3WWxVSApuYmFuOVJkQzA4eW5mSHN1L0oyeGllZFVGQ2VxalR1MGJIKy9SSVJmaXhiam9CdGJhZUNETkQ2UXN6RU1lWk90CkpTZGhpR1ZzTEVCRkRkNzdvb09iYTZGSERQdmF1ZTRSYkJkaXowVEQ3bFlPVFFYS1pDdy9lSFBJWDllR2poU1YKanZIam1SUFk0Snd2L0FvWFptTW0yZWYxN1BmVE1SLzhmRHRqMlAzR0ZacldycWdKS1R6VnVvRy8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=

---
# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      initContainers:
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: calico/cni:v3.4.1
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: calico/node:v3.4.1
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
#            - name: IP_AUTODETECTION_METHOD
#              value: can-reach=10.19.0.60
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "off"
            # Enable IPIP
            - name: FELIX_IPINIPENABLED
              value: "false"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "10.192.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
              host: localhost
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -bird-ready
              - -felix-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: calico/kube-controllers:v3.4.1
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system
---

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system
---


